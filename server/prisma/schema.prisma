generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  PRINTING_PROVIDER
  DESIGNER
}

enum CardStatus {
  PENDING
  APPROVED
  DISABLED
}

enum OrderStatus {
  PENDING
  PROCESSING
  PRINTED
  SHIPPED
  DELIVERED
}

enum PrintStatus {
  PENDING
  ASSIGNED
  PRINTED
  APPROVED
  SHIPPED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  designs               Design[]               @relation("UserDesigns")
  orders                Order[]                @relation("UserOrders")
  assignedOrders        Order[]                @relation("AssignedOrders")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Design {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation("UserDesigns", fields: [userId], references: [id])
  status          CardStatus      @default(PENDING)
  name            String
  description     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  orders          Order[]         @relation("DesignOrders")
  designCategoryId String
  designCategory  DesignCategory  @relation(fields: [designCategoryId], references: [id])
}

model DesignCategory {
  id     String   @id @default(cuid())
  name   String
  designs Design[]
}

model Order {
  id               String      @id @default(cuid())
  userId           String
  user             User        @relation("UserOrders", fields: [userId], references: [id])
  assigneeId       String?
  assignee         User?       @relation("AssignedOrders", fields: [assigneeId], references: [id])
  designId         String
  design           Design      @relation("DesignOrders", fields: [designId], references: [id])
  customMessage    String
  printStatus      PrintStatus @default(PENDING)
  status           OrderStatus @default(PENDING)
  recipientName    String
  recipientAddress String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Blog {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
