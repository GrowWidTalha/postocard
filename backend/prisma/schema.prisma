generator client {
    provider = "prisma-client-js"
      binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "mysql" // Changed from "postgresql" to "mysql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    USER
    ADMIN
    PRINTING_PROVIDER
    DESIGNER
}

enum DesignStatus {
    PENDING
    APPROVED
    REJECTED
}

enum OrderStatus {
    PENDING
    PROCESSING
    PRINTED
    SHIPPED
    DELIVERED
}

enum PrintStatus {
    PENDING
    ASSIGNED
    PRINTED
    APPROVED
    SHIPPED
}

enum DesignType {
    OCCASION
    HOLIDAY
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    emailVerified         DateTime?
    image                 String?
    password              String?
    phone                 String? // NEW: to support mobile communication and reminders
    role                  UserRole               @default(USER)
    membershipExpiresAt   DateTime? // NEW: stores membership expiry for annual memberships
    isTwoFactorEnabled    Boolean                @default(false)
    twoFactorConfirmation TwoFactorConfirmation?
    accounts              Account[]
    designs               Design[]               @relation("UserDesigns")
    orders                Order[]                @relation("UserOrders")
    assignedOrders        Order[]                @relation("AssignedOrders")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refreshToken      String? @db.Text
    accessToken       String? @db.Text
    expiresAt         Int?
    tokenType         String?
    scope             String?
    idToken           String? @db.Text
    sessionState      String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model VerificationToken {
    id      String   @id @unique @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @unique @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @unique @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Design {
    id                String         @id @default(cuid())
    userId            String
    user              User           @relation("UserDesigns", fields: [userId], references: [id])
    designType        DesignType
    status            DesignStatus   @default(PENDING)
    name              String
    description       String
    pdfLink           String
    pdfUploadId       String? // NEW: stores file ID from UploadThing for the PDF
    thumbnailUrl      String
    thumbnailUploadId String? // NEW: stores file ID from UploadThing for the thumbnail
    createdBy         String
    published         Boolean        @default(false)
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
    orders            Order[]        @relation("DesignOrders")
    designCategoryId  String
    designCategory    DesignCategory @relation(fields: [designCategoryId], references: [id])
    subCategoryId     String?
    subCategory       SubCategory?   @relation(fields: [subCategoryId], references: [id])
}

model DesignCategory {
    id            String        @id @default(cuid())
    name          String
    designType    DesignType
    designs       Design[]
    subCategories SubCategory[]
}

model SubCategory {
    id               String         @id @default(cuid())
    name             String
    designCategoryId String
    designCategory   DesignCategory @relation(fields: [designCategoryId], references: [id])
    designs          Design[]
}

model Order {
    id               String      @id @default(cuid())
    userId           String? // UPDATED: made optional to support guest checkout
    user             User?       @relation("UserOrders", fields: [userId], references: [id])
    guestEmail       String? // NEW: for guest checkout orders
    assigneeId       String?
    assignee         User?       @relation("AssignedOrders", fields: [assigneeId], references: [id])
    designId         String
    design           Design      @relation("DesignOrders", fields: [designId], references: [id])
    customMessage    String
    from             String
    to               String
    printStatus      PrintStatus @default(PENDING)
    status           OrderStatus @default(PENDING)
    recipientName    String
    recipientAddress String
    senderName       String? // NEW: for the sender's address (if needed)
    senderAddress    String? // NEW: for the sender's address (if needed)
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt
    stripePaymentId  String? // legacy field â€“ if needed for backward compatibility
    paypalPaymentId  String? // NEW: for PayPal payment integration
}

model Blog {
    id        String   @id @default(cuid())
    createdBy String   @default("admin")
    likes     Int      @default(0)
    views     Int      @default(0)
    title     String
    author    String
    slug      String   @unique
    published Boolean  @default(false)
    content   String
    imageUrl  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
